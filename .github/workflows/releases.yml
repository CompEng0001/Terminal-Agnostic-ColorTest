name: Build and Release ColorTest

on:
  push:
    tags:
      - 'v*'   # Trigger only on tags like v1.0.0, v2.1, etc.

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Compile on Linux and macOS using gcc
    - name: Compile for Linux and macOS
      if: matrix.os != 'windows-latest'
      run: |
        gcc -o colortest-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'mac' }} colortest.c

    # Install MSYS2 and compile on Windows
    - name: Install MSYS2
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: mingw-w64-x86_64-gcc

    - name: Compile for Windows
      if: matrix.os == 'windows-latest'
      run: |
        gcc -o colortest-windows.exe colortest.c
      shell: msys2 {0}

    # Archive Linux and macOS artifacts using zip
    - name: Archive Linux and macOS artifacts
      if: matrix.os != 'windows-latest'
      run: |
        zip colortest-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'mac' }}.zip colortest-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'mac' }}

    # Archive Windows artifacts using Compress-Archive (PowerShell)
    - name: Archive Windows artifacts
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path colortest-windows.exe -DestinationPath colortest-windows.zip
      shell: pwsh

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: colortest-${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'macos-latest' && 'mac' || 'windows' }}
        path: colortest*.zip

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download Linux artifact
      uses: actions/download-artifact@v3
      with:
        name: colortest-linux

    - name: Download macOS artifact
      uses: actions/download-artifact@v3
      with:
        name: colortest-mac

    - name: Download Windows artifact
      uses: actions/download-artifact@v3
      with:
        name: colortest-windows

    - name: Create GitHub Release using gh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ github.ref }} \
          colortest-linux.zip colortest-mac.zip colortest-windows.zip \
          --title "${{ github.ref }}" \
          --notes "Automatic build of ColorTest for Linux, macOS, and Windows."
